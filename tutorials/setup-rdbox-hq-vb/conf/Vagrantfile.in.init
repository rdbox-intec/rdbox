Vagrant.configure(2) do |config|
	if Vagrant.has_plugin?("vagrant-proxyconf")
		config.apt_proxy.http = "HTTP_PROXY"
		config.apt_proxy.https = "HTTPS_PROXY"
	end

	config.vm.box = "ubuntu/xenial64"

	config.vm.define "VPN_VMNAME" do |vpn|
		vpn.vm.provider "virtualbox" do |vb|
		vb.customize [
			"modifyvm", :id,
			"--cpus", "VPN_CPU",
			"--memory", "VPN_MEM",
			"--paravirtprovider", "kvm",
			"--hwvirtex", "on",
			"--nestedpaging", "on",
			"--largepages", "on",
			"--ioapic", "on",
			"--pae", "on",
			"--natnet1", "DEFAULT_NETWORK",
		]
		end
		vpn.disksize.size = "VPN_HDDGB"
		vpn.vm.hostname = "VPN_HOSTNAME"
		if ENV['PUBLIC_BRIDGE_NIC']
			interfaces = %x(VBoxManage list bridgedifs)
			nic = /Name: +(.*#{ENV['PUBLIC_BRIDGE_NIC']}.*)/
			if interfaces =~ nic
				vpn.vm.network "public_network", mac: "VPN_PUBLIC_MAC", type: "dhcp", use_dhcp_assigned_default_route: true, bridge: $1
			else
				vpn.vm.network "public_network", mac: "VPN_PUBLIC_MAC", type: "dhcp", use_dhcp_assigned_default_route: true
			end
		else
			vpn.vm.network "public_network", mac: "VPN_PUBLIC_MAC", type: "dhcp", use_dhcp_assigned_default_route: true
		end
		vpn.vm.network "private_network", ip: "VPN_PRIVATE_IP", netmask: "PRIVATE_NETMASK", virtualbox__intnet: "rdbox-hq"
		vpn.vm.provision "shell", run: "always", inline: <<-ALWAYS_SHELL
			rm -f /etc/apt/apt.conf.d/01proxy
		ALWAYS_SHELL
		vpn.vm.provision "shell", inline: <<-SHELL
			if HTTP_ON ; then
				export http_proxy=HTTP_PROXY
			fi
			if HTTPS_ON ; then
				export https_proxy=HTTPS_PROXY
			fi
			echo 'Acquire::ForceIPv4 "true";' > /etc/apt/apt.conf.d/99force-ipv4
			apt-get update
			apt-get install -y apt-transport-https
			apt-get install -y ipcalc
			apt-get install -y avahi-daemon
			apt-get install -y python
			echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
			sysctl -p
			sed -i -e "s/127.0.1.1/VPN_RDBOX_IP/" /etc/hosts
			echo "MASTER_RDBOX_IP   MASTER_HOSTNAME   MASTER_HOSTNAME" >> /etc/hosts
			NIC1=`netstat -nr|grep DEFAULT_ADDRESS|awk '{print $8}'`
			NIC2=`netstat -nr |awk -v nic1="$NIC1" '{if ($1 == "0.0.0.0" && $8 != nic1) {print $8}}'`
			NIC3=`netstat -nr|grep PRIVATE_ADDRESS|awk '{print $8}'`
			PUBLIC_ADDRESS=`netstat -nr |grep $NIC2|awk '{if ($2 == "0.0.0.0") {print $1}}'`
			PUBLIC_NETMASK=`netstat -nr |grep $NIC2|awk '{if ($2 == "0.0.0.0") {print $3}}'`
			PUBLIC_NETMASK_LEN=`ipcalc $PUBLIC_ADDRESS/$PUBLIC_NETMASK|awk '{if ($1 == "Netmask:") {print $4}}'`
			PUBLIC_NETWORK=$PUBLIC_ADDRESS/$PUBLIC_NETMASK_LEN
			apt-get install -y ipset
cat <<EOF > /usr/local/bin/rdbox-iptables.sh
iptables -t nat -A POSTROUTING -o $NIC2 -j MASQUERADE
EOF
cat <<EOF > /lib/systemd/system/rdbox-iptables.service
[Unit]
Description=iptables for nat at rdbox-hq
After=network-online.target

[Service]
Type=oneshot
ExecStart=/bin/sh /usr/local/bin/rdbox-iptables.sh
RemainAfterExit=yes

[Install]
WantedBy=network-online.target
EOF
			systemctl enable systemd-networkd
			systemctl enable systemd-networkd-wait-online
			systemctl enable rdbox-iptables.service
			systemctl start rdbox-iptables.service
			wget -qO - "https://bintray.com/user/downloadSubjectPublicKey?username=rdbox" | sudo apt-key add -
			echo "deb https://dl.bintray.com/rdbox/deb stretch main" | sudo tee -a /etc/apt/sources.list.d/rdbox.list
			apt-get update
			apt-get install -y transproxy
cat <<EOF > /etc/transproxy/http_proxy
http_proxy=HTTP_PROXY
https_proxy=HTTPS_PROXY
EOF
cat <<EOF > /etc/transproxy/no_proxy
no_proxy=127.0.0.1,$PUBLIC_NETWORK,RDBOX_NETWORK,DEFAULT_NETWORK,PRIVATE_NETWORK
EOF
			sed -i -e "s/disable-dnsproxy\s*=\s*false/disable-dnsproxy = true/" /etc/transproxy/transproxy.conf
			sed -i -e "s/execute-standalone\s*=\s*false/execute-standalone = true/" /etc/transproxy/transproxy.conf
			if (HTTP_ON || HTTPS_ON) ; then
				systemctl enable transproxy.service
				systemctl start transproxy.service
			fi
			ID_PUB=/vagrant/id_rsa.pub
			AUTH_KEYS=/home/vagrant/.ssh/authorized_keys
			if [ -f $ID_PUB ] ; then
				cat $ID_PUB >> $AUTH_KEYS
				chown vagrant:vagrant $AUTH_KEYS
				chmod 0600 $AUTH_KEYS
			fi
			ACCOUNT_CHECK=`getent passwd RDBOX_USER_ACCOUNT`
			if [ -z "$ACCOUNT_CHECK" ]; then
				echo "RDBOX_USER_ACCOUNT is not exist, so adding the user..."
				useradd -m -s /bin/bash RDBOX_USER_ACCOUNT
				echo "done."
			fi
			usermod -G sudo RDBOX_USER_ACCOUNT
			echo "RDBOX_USER_ACCOUNT ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/RDBOX_USER_ACCOUNT
			chmod 0440 /etc/sudoers.d/RDBOX_USER_ACCOUNT
			SSH_DIR=/home/RDBOX_USER_ACCOUNT/.ssh
			USER_KEY=/vagrant/id_rsa.common
			USER_PUBKEY=/vagrant/id_rsa.pub.common
			if [ ! -e $SSH_DIR ]; then
				mkdir $SSH_DIR
			fi
			chmod 0700 $SSH_DIR
			cp -p $USER_KEY $SSH_DIR/id_rsa
			cp -p $USER_PUBKEY $SSH_DIR/id_rsa.pub
			cat $SSH_DIR/id_rsa.pub >> $SSH_DIR/authorized_keys
			chown -R RDBOX_USER_ACCOUNT:RDBOX_USER_ACCOUNT $SSH_DIR
			chmod 0600 $SSH_DIR/authorized_keys
			chmod 0600 $SSH_DIR/id_rsa
			chmod 0644 $SSH_DIR/id_rsa.pub
			reboot
		SHELL
	end

	config.vm.define "MASTER_VMNAME" do |master|
		master.vm.provider "virtualbox" do |vb|
		vb.customize [
			"modifyvm", :id,
			"--cpus", "MASTER_CPU",
			"--memory", "MASTER_MEM",
			"--paravirtprovider", "kvm",
			"--hwvirtex", "on",
			"--nestedpaging", "on",
			"--largepages", "on",
			"--ioapic", "on",
			"--pae", "on",
			"--natnet1", "DEFAULT_NETWORK",
		]
		end
		master.disksize.size = "MASTER_HDDGB"
		master.vm.hostname = "MASTER_HOSTNAME"
		if ENV['PUBLIC_BRIDGE_NIC']
			interfaces = %x(VBoxManage list bridgedifs)
			nic = /Name: +(.*#{ENV['PUBLIC_BRIDGE_NIC']}.*)/
			if interfaces =~ nic
				master.vm.network "public_network", mac: "MASTER_PUBLIC_MAC", type: "dhcp", bridge: $1
			else
				master.vm.network "public_network", mac: "MASTER_PUBLIC_MAC", type: "dhcp"
			end
		else
			master.vm.network "public_network", mac: "MASTER_PUBLIC_MAC", type: "dhcp"
		end
		master.vm.network "private_network", ip: "MASTER_PRIVATE_IP", netmask: "PRIVATE_NETMASK", virtualbox__intnet: "rdbox-hq"
		master.vm.provision "shell", run: "always", inline: <<-ALWAYS_SHELL
			rm -f /etc/apt/apt.conf.d/01proxy
		ALWAYS_SHELL
		master.vm.provision "shell", inline: <<-SHELL
			if HTTP_ON ; then
				export http_proxy=HTTP_PROXY
			fi
			if HTTPS_ON ; then
				export https_proxy=HTTPS_PROXY
			fi
			echo 'Acquire::ForceIPv4 "true";' > /etc/apt/apt.conf.d/99force-ipv4
			apt-get update
			apt-get install -y avahi-daemon
			apt-get install -y python
			sed -i -e "s/127.0.1.1/MASTER_RDBOX_IP/" /etc/hosts
cat <<EOF > /usr/local/bin/rdbox-network.sh
sleep 60
ip route del default
ip route del default
ip route add default via VPN_PRIVATE_IP
EOF
cat <<EOF > /lib/systemd/system/rdbox-network.service
[Unit]
Description=modify current network
After=network-online.target

[Service]
Type=oneshot
ExecStart=/bin/sh /usr/local/bin/rdbox-network.sh
RemainAfterExit=yes

[Install]
WantedBy=network-online.target
EOF
			systemctl enable systemd-networkd
			systemctl enable systemd-networkd-wait-online
			systemctl enable rdbox-network.service
			sh /usr/local/bin/rdbox-network.sh
			ID_PUB=/vagrant/id_rsa.pub
			AUTH_KEYS=/home/vagrant/.ssh/authorized_keys
			if [ -f $ID_PUB ] ; then
				cat $ID_PUB >> $AUTH_KEYS
				chown vagrant:vagrant $AUTH_KEYS
				chmod 0600 $AUTH_KEYS
			fi
			ACCOUNT_CHECK=`getent passwd RDBOX_USER_ACCOUNT`
			if [ -z "$ACCOUNT_CHECK" ]; then
				echo "RDBOX_USER_ACCOUNT is not exist, so adding the user..."
				useradd -m -s /bin/bash RDBOX_USER_ACCOUNT
				echo "done."
			fi
			usermod -G sudo RDBOX_USER_ACCOUNT
			echo "RDBOX_USER_ACCOUNT ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/RDBOX_USER_ACCOUNT
			chmod 0440 /etc/sudoers.d/RDBOX_USER_ACCOUNT
			SSH_DIR=/home/RDBOX_USER_ACCOUNT/.ssh
			USER_KEY=/vagrant/id_rsa.common
			USER_PUBKEY=/vagrant/id_rsa.pub.common
			if [ ! -e $SSH_DIR ]; then
				mkdir $SSH_DIR
			fi
			chmod 0700 $SSH_DIR
			cp -p $USER_KEY $SSH_DIR/id_rsa
			cp -p $USER_PUBKEY $SSH_DIR/id_rsa.pub
			cat $SSH_DIR/id_rsa.pub >> $SSH_DIR/authorized_keys
			chown -R RDBOX_USER_ACCOUNT:RDBOX_USER_ACCOUNT $SSH_DIR
			chmod 0600 $SSH_DIR/authorized_keys
			chmod 0600 $SSH_DIR/id_rsa
			chmod 0644 $SSH_DIR/id_rsa.pub
			reboot
		SHELL
	end

end
